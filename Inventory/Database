To create a database for the StockControlSystem using Django, you need to follow these steps:

Install Django: Make sure you have Django installed on your system. You can install it using pip with the command: pip install django.

Create a Django project: Open a terminal or command prompt, navigate to the desired directory, and run the following command to create a new Django project named stock_control_system:

bash
Copy code
django-admin startproject stock_control_system
Create a Django app: Change into the project directory by running cd stock_control_system and create a Django app named stock with the following command:

bash
Copy code
python manage.py startapp stock
Define the model: Open the stock/models.py file and define the model for the stock item. Modify the file as follows:


from django.db import models

class StockItem(models.Model):
    item_id = models.IntegerField(primary_key=True)
    item_name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=8, decimal_places=2)
    quantity = models.IntegerField()
    store = models.CharField(max_length=255)

    def __str__(self):
        return self.item_name
In this example, we define the StockItem model with the fields item_id, item_name, price, quantity, and store. 
The item_id field is set as the primary key. The __str__ method is defined to display the item_name when the object is printed.

Create the database tables: To create the necessary database tables, run the following command:


python manage.py makemigrations
python manage.py migrate
This will generate the database schema based on the model you defined.

Use the model in views: Open the stock/views.py file and modify it to use the StockItem model. 
For example, you can define a view to display all the stock items:


from django.shortcuts import render
from .models import StockItem

def stock_list(request):
    stock_items = StockItem.objects.all()
    return render(request, 'stock/stock_list.html', {'stock_items': stock_items})
This view retrieves all the StockItem objects from the database and passes them to a template named stock_list.html.

Create a template: Create a directory named templates in the stock app directory. Inside the templates directory, 
create a file named stock_list.html and add the following code:

html
Copy code
<h1>Stock Items</h1>
<ul>
{% for stock_item in stock_items %}
    <li>{{ stock_item }}</li>
{% empty %}
    <li>No stock items found.</li>
{% endfor %}
</ul>
This template displays the list of stock items retrieved from the view.

Define URLs: Open the stock_control_system/urls.py file and modify it to include the URLs for the stock app. Update the file as follows:


from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('stock/', include('stock.urls')),
]
Create app URLs: Create a file named urls.py inside the stock app directory and add the following code:


from django.urls import path
from . import views

urlpatterns = [
    path('list/', views.stock_list, name='stock_list'),
]
This code defines a URL pattern for the stock_list view.

Run the development server: Start the Django development server by running the following command:

bash
Copy code
python manage.py runserver
The server will start, and you can access the stock list page at http://127.0.0.1:8000/stock/list/.

That's it! You have successfully created a Django project with a database for the StockControlSystem using Django's ORM. 
You can extend this setup by adding more views, templates, and database operations as needed.


and create database for purchase and sale
ChatGPT
To create databases for the Purchase and Sale entities in the StockControlSystem using Django, 
you can follow a similar process as described before. Here are the steps:

Create the models: Open the stock/models.py file and define the models for Purchase and Sale. Modify the file as follows:


from django.db import models

class Purchase(models.Model):
    purchase_id = models.AutoField(primary_key=True)
    item = models.ForeignKey('StockItem', on_delete=models.CASCADE)
    quantity = models.IntegerField()
    purchase_date = models.DateField(auto_now_add=True)

class Sale(models.Model):
    sale_id = models.AutoField(primary_key=True)
    item = models.ForeignKey('StockItem', on_delete=models.CASCADE)
    quantity = models.IntegerField()
    sale_date = models.DateField(auto_now_add=True)
In this example, we define the Purchase and Sale models with fields such as purchase_id, item, quantity, and purchase_date (similarly for Sale). 
The item field is a foreign key that references the StockItem model.

Create the database tables: To create the necessary database tables for the new models, run the following commands:
python manage.py makemigrations
python manage.py migrate

This will generate the database schema for the Purchase and Sale models.

Use the models in views: Open the appropriate view files (e.g., purchase/views.py and sale/views.py) and modify them to use the Purchase and Sale models. 
For example:

from django.shortcuts import render
from .models import Purchase

def purchase_list(request):
    purchases = Purchase.objects.all()
    return render(request, 'purchase/purchase_list.html', {'purchases': purchases})
Similarly, create views for the Sale model.

Create the templates: Create templates for the purchase and sale views. Inside the templates directory of the respective app, 
create files such as purchase_list.html and sale_list.html with appropriate code to display the lists of purchases and sales.

Define URLs: Create URL configurations for the purchase and sale views. Update the urls.py files in the respective app directories 
to include the URLs for the views.

Run the development server: Start the Django development server by running python manage.py runserver.

By following these steps, you can create separate databases for the Purchase and Sale entities in your 
StockControlSystem Django project. Each entity will have its own model, views, templates, and URLs. 
You can then customize and extend the functionality as needed for managing purchases and sales within your stock control system.
