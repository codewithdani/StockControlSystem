class StockControlSystem:
    def __init__(self):
        self.stock = {}

    def purchase_item(self, item_id, item_name, price, quantity, store):
        if item_id in self.stock:
            self.stock[item_id]["quantity"] += quantity
        else:
            item = {
                "item_id": item_id,
                "item_name": item_name,
                "price": price,
                "quantity": quantity,
                "store": store
            }
            self.stock[item_id] = item

    def sell_item(self, item_id, quantity):
        if item_id in self.stock:
            if quantity >= self.stock[item_id]["quantity"]:
                del self.stock[item_id]
            else:
                self.stock[item_id]["quantity"] -= quantity
        else:
            print(f"Item with item ID {item_id} does not exist.")

    def get_stock_quantity(self, item_id):
        if item_id in self.stock:
            return self.stock[item_id]["quantity"]
        else:
            print(f"Item with item ID {item_id} does not exist.")
            return 0

    def __str__(self):
        header = "Item ID\tItem Name\tPrice\tQuantity\tStore\n"
        stock_str = header
        for item_id, item in self.stock.items():
            stock_str += f"{item['item_id']}\t{item['item_name']}\t{item['price']}\t{item['quantity']}\t{item['store']}\n"
        return stock_str

# Example usage:
stock_system = StockControlSystem()
stock_system.purchase_item(1, "Apple", 0.5, 10, "Store A")
stock_system.purchase_item(2, "Banana", 0.25, 5, "Store B")
stock_system.purchase_item(3, "Orange", 0.3, 8, "Store A")
stock_system.purchase_item(4, "Peach", 0.8, 6, "Store B")

stock_system.sell_item(2, 2)

print(stock_system.get_stock_quantity(1))  # Output: 10
print(stock_system.get_stock_quantity(2))  # Output: Item with item ID 2 does not exist.

print(stock_system)
# Output:
# Item ID    Item Name    Price    Quantity    Store
# 1          Apple        0.5      10          Store A
# 2          Banana       0.25     3           Store B 
# 3          Orange       0.3      8           Store A
# 4          Peach        0.8      6           Store B


In this updated version, the methods add_item and remove_item have been replaced with purchase_item and sell_item respectively. 
The purchase_item method checks if the item with the given item_id already exists and updates the quantity if it does. Otherwise, 
it adds a new item to the stock. The sell_item method reduces the quantity of the item by the specified quantity, and if the quantity 
becomes zero or less, it removes the item from the stock. the __str__ method first defines a header string that represents the column names.

