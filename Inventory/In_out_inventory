class StockControlSystem:
    def __init__(self):
        self.stock = []  # List to store stock items

    def add_item(self, item_id, item_name, price, quantity, store):
        item = {
            "item_id": item_id,
            "item_name": item_name,
            "price": price,
            "quantity": quantity,
            "store": store
        }
        self.stock.append(item)

    def remove_item(self, item_id):
        for item in self.stock:
            if item["item_id"] == item_id:
                self.stock.remove(item)
                break

    def get_stock_quantity(self, item_id):
        for item in self.stock:
            if item["item_id"] == item_id:
                return item["quantity"]
        return 0

    def __str__(self):
        header = "Item ID\tItem Name\tPrice\tQuantity\tStore\n"
        stock_str = header
        for item_id, item in self.stock.items():
            stock_str += f"{item['item_id']}\t{item['item_name']}\t{item['price']}\t{item['quantity']}\t{item['store']}\n"
        return stock_str

# Example usage:
stock_system = StockControlSystem()
stock_system.add_item(1, "Apple", 0.5, 10, "Store A")
stock_system.add_item(2, "Banana", 0.25, 5, "Store B")
stock_system.add_item(3, "Orange", 0.3, 8, "Store A")

stock_system.remove_item(2)

print(stock_system.get_stock_quantity(1))  # Output: 10
print(stock_system.get_stock_quantity(2))  # Output: 0

stock_system.print_stock()
# Output:
# Item ID    Item Name    Price    Quantity    Store
# 1          Apple        0.5      10          Store A
# 3          Orange       0.3      8           Store A

# --------------------

In this updated example, the StockControlSystem class includes the instance variables item_id, item_name, price, quantity, and store. 
Each stock item is represented as a dictionary with these variables as key-value pairs. The class provides methods to add and remove items from the stock, 
retrieve the quantity of a specific item by its item_id, and print the current stock status.



